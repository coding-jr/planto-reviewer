"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unsafeSet = exports.unsafeGet = exports.size = exports.set = exports.runtime = exports.run = exports.remove = exports.makeRuntime = exports.make = exports.isFiberMap = exports.get = exports.clear = exports.TypeId = void 0;
var Effect = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/Effect"));
var Fiber = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./Fiber.js"));
var FiberId = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./FiberId.js"));
var _Function = /*#__PURE__*/require("./Function.js");
var Inspectable = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./Inspectable.js"));
var MutableHashMap = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./MutableHashMap.js"));
var Option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./Option.js"));
var _Pipeable = /*#__PURE__*/require("./Pipeable.js");
var Predicate = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./Predicate.js"));
var Runtime = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./Runtime.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * @since 2.0.0
 */

/**
 * @since 2.0.0
 * @categories type ids
 */
const TypeId = exports.TypeId = /*#__PURE__*/Symbol.for("effect/FiberMap");
/**
 * @since 2.0.0
 * @categories refinements
 */
const isFiberMap = u => Predicate.hasProperty(u, TypeId);
exports.isFiberMap = isFiberMap;
const Proto = {
  [TypeId]: TypeId,
  [Symbol.iterator]() {
    return this.backing[Symbol.iterator]();
  },
  toString() {
    return Inspectable.format(this.toJSON());
  },
  toJSON() {
    return {
      _id: "FiberMap",
      backing: this.backing.toJSON()
    };
  },
  [Inspectable.NodeInspectSymbol]() {
    return this.toJSON();
  },
  pipe() {
    return (0, _Pipeable.pipeArguments)(this, arguments);
  }
};
const unsafeMake = () => {
  const self = Object.create(Proto);
  self.backing = MutableHashMap.empty();
  return self;
};
/**
 * A FiberMap can be used to store a collection of fibers, indexed by some key.
 * When the associated Scope is closed, all fibers in the map will be interrupted.
 *
 * You can add fibers to the map using `FiberMap.set` or `FiberMap.run`, and the fibers will
 * be automatically removed from the FiberMap when they complete.
 *
 * @example
 * import { Effect, FiberMap } from "effect"
 *
 * Effect.gen(function*(_) {
 *   const map = yield* _(FiberMap.make<string>())
 *
 *   // run some effects and add the fibers to the map
 *   yield* _(FiberMap.run(map, "fiber a", Effect.never))
 *   yield* _(FiberMap.run(map, "fiber b", Effect.never))
 *
 *   yield* _(Effect.sleep(1000))
 * }).pipe(
 *   Effect.scoped // The fibers will be interrupted when the scope is closed
 * )
 *
 * @since 2.0.0
 * @categories constructors
 */
const make = () => Effect.acquireRelease(Effect.sync(() => unsafeMake()), clear);
/**
 * Create an Effect run function that is backed by a FiberMap.
 *
 * @since 2.0.0
 * @categories constructors
 */
exports.make = make;
const makeRuntime = () => Effect.flatMap(make(), self => runtime(self)());
/**
 * Add a fiber to the FiberMap. When the fiber completes, it will be removed from the FiberMap.
 * If the key already exists in the FiberMap, the previous fiber will be interrupted.
 *
 * @since 2.0.0
 * @categories combinators
 */
exports.makeRuntime = makeRuntime;
const unsafeSet = exports.unsafeSet = /*#__PURE__*/(0, _Function.dual)(args => isFiberMap(args[0]), (self, key, fiber, interruptAs) => {
  const previous = MutableHashMap.get(self.backing, key);
  if (previous._tag === "Some") {
    if (previous.value === fiber) {
      return;
    }
    previous.value.unsafeInterruptAsFork(interruptAs ?? FiberId.none);
  }
  MutableHashMap.set(self.backing, key, fiber);
  fiber.addObserver(_ => {
    const current = MutableHashMap.get(self.backing, key);
    if (Option.isSome(current) && fiber === current.value) {
      MutableHashMap.remove(self.backing, key);
    }
  });
});
/**
 * Add a fiber to the FiberMap. When the fiber completes, it will be removed from the FiberMap.
 * If the key already exists in the FiberMap, the previous fiber will be interrupted.
 *
 * @since 2.0.0
 * @categories combinators
 */
const set = exports.set = /*#__PURE__*/(0, _Function.dual)(3, (self, key, fiber) => Effect.fiberIdWith(fiberId => Effect.sync(() => unsafeSet(self, key, fiber, fiberId))));
/**
 * Retrieve a fiber from the FiberMap.
 *
 * @since 2.0.0
 * @categories combinators
 */
const unsafeGet = exports.unsafeGet = /*#__PURE__*/(0, _Function.dual)(2, (self, key) => MutableHashMap.get(self.backing, key));
/**
 * Retrieve a fiber from the FiberMap.
 *
 * @since 2.0.0
 * @categories combinators
 */
const get = exports.get = /*#__PURE__*/(0, _Function.dual)(2, (self, key) => Effect.suspend(() => MutableHashMap.get(self.backing, key)));
/**
 * Remove a fiber from the FiberMap, interrupting it if it exists.
 *
 * @since 2.0.0
 * @categories combinators
 */
const remove = exports.remove = /*#__PURE__*/(0, _Function.dual)(2, (self, key) => Effect.suspend(() => {
  const fiber = MutableHashMap.get(self.backing, key);
  if (fiber._tag === "None") {
    return Effect.unit;
  }
  MutableHashMap.remove(self.backing, key);
  return Fiber.interrupt(fiber.value);
}));
/**
 * @since 2.0.0
 * @categories combinators
 */
const clear = self => Effect.zipRight(Effect.forEach(self.backing, ([_, fiber]) => Fiber.interrupt(fiber)), Effect.sync(() => {
  MutableHashMap.clear(self.backing);
}));
/**
 * Run an Effect and add the forked fiber to the FiberMap.
 * When the fiber completes, it will be removed from the FiberMap.
 *
 * @since 2.0.0
 * @categories combinators
 */
exports.clear = clear;
const run = function () {
  if (arguments.length === 2) {
    const self = arguments[0];
    const key = arguments[1];
    return effect => Effect.tap(Effect.forkDaemon(effect), fiber => set(self, key, fiber));
  }
  const self = arguments[0];
  const key = arguments[1];
  const effect = arguments[2];
  return Effect.tap(Effect.forkDaemon(effect), fiber => set(self, key, fiber));
};
/**
 * Capture a Runtime and use it to fork Effect's, adding the forked fibers to the FiberMap.
 *
 * @example
 * import { Context, Effect, FiberMap } from "effect"
 *
 * interface Users {
 *   readonly _: unique symbol
 * }
 * const Users = Context.GenericTag<Users, {
 *    getAll: Effect.Effect<Array<unknown>>
 * }>("Users")
 *
 * Effect.gen(function*(_) {
 *   const map = yield* _(FiberMap.make<string>())
 *   const run = yield* _(FiberMap.runtime(map)<Users>())
 *
 *   // run some effects and add the fibers to the map
 *   run("effect-a", Effect.andThen(Users, _ => _.getAll))
 *   run("effect-b", Effect.andThen(Users, _ => _.getAll))
 * }).pipe(
 *   Effect.scoped // The fibers will be interrupted when the scope is closed
 * )
 *
 * @since 2.0.0
 * @categories combinators
 */
exports.run = run;
const runtime = self => () => Effect.map(Effect.runtime(), runtime => {
  const runFork = Runtime.runFork(runtime);
  return (key, effect, options) => {
    const fiber = runFork(effect, options);
    unsafeSet(self, key, fiber);
    return fiber;
  };
});
/**
 * @since 2.0.0
 * @categories combinators
 */
exports.runtime = runtime;
const size = self => Effect.sync(() => MutableHashMap.size(self.backing));
exports.size = size;
//# sourceMappingURL=FiberMap.js.map